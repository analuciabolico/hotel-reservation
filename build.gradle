plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
}

apply plugin: 'java'
group = 'com.analuciabolico'
version = '0.0.1'
sourceCompatibility = '1.8'
sourceCompatibility = 11
targetCompatibility = 11
String mainClass = 'com.analuciabolico.hotelreservation.Application'

def myManifest = manifest {
	attributes	'Implementation-Title': 'Challenge TW Hotel Reservation',
				'Implementation-Version': version,
				'Main-Class': mainClass
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
    implementation 'junit:junit:4.12'
}

test {
	useJUnitPlatform()
}

task execute(type: JavaExec) {
	main = mainClass
	classpath = sourceSets.main.runtimeClasspath
}

jar {
	exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
	manifest {
		manifest = myManifest
		manifest.attributes "Class-Path": configurations.compile.collect { 'libs/' + it.getName()}.join(' ')
	}
}

task fatJar(type: Jar, group: "build") {
	manifest = myManifest
	baseName = project.name + '-all'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}
